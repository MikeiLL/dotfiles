# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
# See .zshenv for PATH exports.

ZSH_DISABLE_COMPFIX=true
# Path to your oh-my-zsh installation.
export ZSH="/Users/mikekilmer/.oh-my-zsh"

echo "zshrc loading"

# jacobwgillespie Start
# If profiling is enabled, collect timing information
if [ ! -z "$ZSH_PROF" ]; then
  zmodload zsh/zprof
fi

# Enable CLI colors (https://geoff.greer.fm/lscolors/)
export CLICOLOR=true
export LSCOLORS="Gxfxcxdxbxegedabagacab"
export LS_COLORS='no=00:fi=00:di=01;34:ln=00;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=41;33;01:ex=00;32:ow=0;41:*.cmd=00;32:*.exe=01;32:*.com=01;32:*.bat=01;32:*.btm=01;32:*.dll=01;32:*.tar=00;31:*.tbz=00;31:*.tgz=00;31:*.rpm=00;31:*.deb=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.zoo=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.tb2=00;31:*.tz2=00;31:*.tbz2=00;31:*.avi=01;35:*.bmp=01;35:*.fli=01;35:*.gif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mng=01;35:*.mov=01;35:*.mpg=01;35:*.pcx=01;35:*.pbm=01;35:*.pgm=01;35:*.png=01;35:*.ppm=01;35:*.tga=01;35:*.tif=01;35:*.xbm=01;35:*.xpm=01;35:*.dl=01;35:*.gl=01;35:*.wmv=01;35:*.aiff=00;32:*.au=00;32:*.mid=00;32:*.mp3=00;32:*.ogg=00;32:*.voc=00;32:*.wav=00;32:*.patch=00;34:*.o=00;32:*.so=01;35:*.ko=01;31:*.la=00;33'

# Configure directories
export DOTFILES=$HOME/.dotfiles
export XDG_CONFIG_HOME=$HOME/.config
export PROJECTS=~/Code

# load functions
fpath=($DOTFILES/functions $fpath)
autoload -U compinit
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
autoload -U $DOTFILES/functions/*(:t)

# If zsh complains about insecure directories, run
#   chmod go-w '/usr/local/share' or compaudit | xargs chmod g-w
if type brew &>/dev/null; then
  fpath=($(brew --prefix)/share/zsh-completions $fpath)
fi

# Setup completion
compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # match lowercase as case-insensitive
# zstyle ':completion:*' insert-tab pending # pasted tabs don't trigger completion
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} # set file completion suggestions to ls colors

# Source configuration files
for file in $DOTFILES/config/*.zsh; do source $file; done
if [[ -a ~/.localrc ]]; then source ~/.localrc; fi

# Configure zsh history behavior
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# Set ZSH options
setopt NO_BG_NICE # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY # share history between sessions ???
setopt EXTENDED_HISTORY # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt COMPLETE_ALIASES
setopt IGNORE_EOF
setopt APPEND_HISTORY # adds history
setopt INC_APPEND_HISTORY SHARE_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS

# Configure zsh line editor
zle -N newtab
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# Configure keybinds
bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[[5D' beginning-of-line
bindkey '^[[5C' end-of-line
bindkey '^[[3~' delete-char
bindkey '^[^N' newtab
bindkey '^?' backward-delete-char
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# Enable syntax highlighting
if [ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Enable auto-suggestions
if [ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  # Fetch suggestions asynchronously
  export ZSH_AUTOSUGGEST_USE_ASYNC=1
  # Suggest from completion first, then history if nothing is found
  export ZSH_AUTOSUGGEST_STRATEGY=(completion history)
  # Disable automatic rebind (better performance)
  export ZSH_AUTOSUGGEST_MANUAL_REBIND=1
fi

# Enable substring history matching
if [ -f /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh ]; then
  source /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh
  bindkey "^[[A" history-substring-search-up # Up
  bindkey "^[[B" history-substring-search-down # Down
  export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="bg=green,fg=white,bold"
fi

# If profiling is enabled, display timing information
if [ ! -z "$ZSH_PROF" ]; then
  zprof
fi
# jacobwgillespie End

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  docker
  docker-compose
  git
  autoenv # https://github.com/DArcMattr/autoenv
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# added by travis gem
[ -f /Users/mikekilmer/.travis/travis.sh ] && source /Users/mikekilmer/.travis/travis.sh

# Set Apple Terminal.app resume directory
# source: https://superuser.com/questions/313650/resume-zsh-terminal-os-x-lion
if [[ $TERM_PROGRAM == "Apple_Terminal" ]] && [[ -z "$INSIDE_EMACS" ]] {
  function chpwd {
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
  }

  chpwd
}

source ~/.custom-alias

# from Rosuav
checkdir() {
   [ -n "$VIRTUAL_ENV" ] && ! [[ `pwd` =~ `dirname $VIRTUAL_ENV`* ]] && echo Deactivating venv $VIRTUAL_ENV... && deactivate
   [ -z "$VIRTUAL_ENV" -a -d env ] && echo Activating venv `pwd`/env... && source env/bin/activate
}
# this is preventing new tab from opening in same directory.
# PROMPT_COMMAND=checkdir

# as per http://hackercodex.com/guide/python-development-environment-on-mac-osx/
# pip should only run if there is a virtualenv currently activated
gpip(){
   PIP_REQUIRE_VIRTUALENV="0" pip3 "$@"
}

# function lorem(){
# 	# Copy lorem ipsum to your clipboard in OS X
#
# 	# usage:
#
# 	# $ lorem <int> <htmlflag>
#
# 	# where <int> is how many paragraphs of lorem ipsum you want, each separated by 2 newlines
# 	# and <htmlflag> is anything, indicating you want each paragraph surrounded by <p></p>. Omit if you don't want this.
#
# 	# Explanations
#
# 	# This is our source lorem ipsum text.
# 	lorem='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
#
# 	# Here we are gathering the <int> argument.
# 	count=$(( $1 ))
#
# 	# The minimum is 1 lorem ipsum, so enforce that here.
# 	if [[ "$count" -lt 1 ]];
# 	then
# 		count=$(( $count + 1 ))
# 	fi
#
# 	# This is the variable that will hold our output.
# 	text=''
#
# 	# Iterate until our count is zero. Decrement each iteration.
# 	while [ "$count" -gt 0 ];
# 	do
# 		# Append the lorem ipsum again.
# 		# Check if we should add a beginning <p> tag.
# 		if [[ $2 != '' ]];
# 		then
# 			text=$text'<p>'$lorem'</p>'
# 		else
# 			text=$text$lorem
# 		fi
#
# 		# If this isn't the last iteration, add newlines or paragraph HTML tags.
# 		if [[ "$count" -gt 1 ]];
# 		then
# 			text=$text'\n\n'
# 		fi
#
# 		# Decrement our counter variable.
# 		count=$(( $count - 1 ))
# 	done
#
# 	# Copy to clipboard!
# 	echo -e $text | pbcopy
# }
#
# #Usage: gcreate userName repoName "Description if any"
# # source: https://gist.github.com/robwierzbowski/5430952#gistcomment-1622416
gcreate () {
  curl -u $1 https://api.github.com/user/repos -d "{\"name\": \"$2\", \"description\": \"$3\"}"
}

# if type brew &>/dev/null; then
#   FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
#   autoload -Uz compinit
#   compinit
# fi

# Maybe figure this out: https://github.com/pypa/pipenv

# Trellis CLI Auto Complete
eval "$(trellis shell-init zsh)"


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Nope. Now we want to use pynenv See: https://ducfilan.wordpress.com/2017/11/13/manage-versions-of-python-with-pyenv-and-zsh-in-macos/
# alias python=/usr/local/bin/python3.9 Version 2 was Python 2.7.17 from Brew

# Retain history per tab
unsetopt inc_append_history
unsetopt share_history
setopt complete_aliases

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/trellis trellis

if [[ ! -f ~/.zpm/zpm.zsh ]]; then
  git clone --recursive https://github.com/zpm-zsh/zpm ~/.zpm
fi
source ~/.zpm/zpm.zsh

zpm load zpm-zsh/autoenv
eval "$(starship init zsh)"
